{
  "name": "Trabalho - 02 - Grupo IAI",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "-- Tabela para Notas Fiscais\nCREATE TABLE IF NOT EXISTS notas_fiscais (\n    chave_acesso TEXT PRIMARY KEY,\n    modelo TEXT NOT NULL,\n    serie TEXT NOT NULL,\n    numero TEXT NOT NULL,\n    natureza_operacao TEXT NOT NULL,\n    data_emissao DATE NOT NULL,\n    evento_mais_recente TEXT NOT NULL,\n    data_hora_evento_mais_recente TIMESTAMP NOT NULL,\n    cpf_cnpj_emitente TEXT NOT NULL,\n    razao_social_emitente TEXT NOT NULL,\n    inscricao_estadual_emitente TEXT NOT NULL,\n    uf_emitente TEXT NOT NULL,\n    municipio_emitente TEXT NOT NULL,\n    cnpj_destinatario TEXT NOT NULL,\n    nome_destinatario TEXT NOT NULL,\n    uf_destinatario TEXT NOT NULL,\n    indicador_ie_destinatario TEXT NOT NULL,\n    destino_operacao TEXT NOT NULL,\n    consumidor_final TEXT NOT NULL,\n    presenca_comprador TEXT NOT NULL,\n    valor_nota_fiscal NUMERIC(15, 2) NOT NULL\n);\n\n-- Tabela para Itens das Notas Fiscais\nCREATE TABLE IF NOT EXISTS itens_notas_fiscais (\n    id SERIAL PRIMARY KEY,\n\n    chave_acesso TEXT NOT NULL REFERENCES notas_fiscais(chave_acesso),\n    modelo TEXT NOT NULL,\n    serie TEXT NOT NULL,\n    numero TEXT NOT NULL,\n    natureza_operacao TEXT NOT NULL,\n    data_emissao DATE NOT NULL,\n    cpf_cnpj_emitente TEXT NOT NULL,\n    razao_social_emitente TEXT NOT NULL,\n    inscricao_estadual_emitente TEXT NOT NULL,\n    uf_emitente TEXT NOT NULL,\n    municipio_emitente TEXT NOT NULL,\n    cnpj_destinatario TEXT NOT NULL,\n    nome_destinatario TEXT NOT NULL,\n    uf_destinatario TEXT NOT NULL,\n    indicador_ie_destinatario TEXT NOT NULL,\n    destino_operacao TEXT NOT NULL,\n    consumidor_final TEXT NOT NULL,\n    presenca_comprador TEXT NOT NULL,\n    numero_produto TEXT NOT NULL,\n    descricao_produto_servico TEXT NOT NULL,\n    codigo_ncm_sh TEXT NOT NULL,\n    ncm_sh_tipo_produto TEXT NOT NULL,\n    cfop TEXT NOT NULL,\n    quantidade NUMERIC(15, 4) NOT NULL,\n    unidade TEXT NOT NULL,\n    valor_unitario NUMERIC(15, 4) NOT NULL,\n    valor_total NUMERIC(15, 2) NOT NULL,\n\n    CONSTRAINT itens_unicos UNIQUE (\n        chave_acesso,\n        modelo,\n        serie,\n        numero,\n        natureza_operacao,\n        data_emissao,\n        cpf_cnpj_emitente,\n        razao_social_emitente,\n        inscricao_estadual_emitente,\n        uf_emitente,\n        municipio_emitente,\n        cnpj_destinatario,\n        nome_destinatario,\n        uf_destinatario,\n        indicador_ie_destinatario,\n        destino_operacao,\n        consumidor_final,\n        presenca_comprador,\n        numero_produto,\n        descricao_produto_servico,\n        codigo_ncm_sh,\n        ncm_sh_tipo_produto,\n        cfop,\n        quantidade,\n        unidade,\n        valor_unitario,\n        valor_total\n    )\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        160,
        660
      ],
      "id": "d3594af4-b2bf-4f54-a9fa-ec60521f418a",
      "name": "Criar Tabelas",
      "credentials": {
        "postgres": {
          "id": "vI97A52vu2wzn33W",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 580,
        "width": 1800
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        0
      ],
      "id": "da43c244-51e3-4044-bdd5-da57ee0e65bd",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "mode": "list",
          "value": "public"
        },
        "table": {
          "__rl": true,
          "value": "notas_fiscais",
          "mode": "list",
          "cachedResultName": "notas_fiscais"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "valor_nota_fiscal": "={{ $json.valor_nota_fiscal }}",
            "chave_acesso": "={{ $json.chave_acesso }}",
            "modelo": "={{ $json.modelo }}",
            "serie": "={{ $json.serie }}",
            "numero": "={{ $json.numero }}",
            "natureza_operacao": "={{ $json.natureza_operacao }}",
            "data_emissao": "={{ $json.data_emissao }}",
            "evento_mais_recente": "={{ $json.evento_mais_recente }}",
            "data_hora_evento_mais_recente": "={{ $json.data_hora_evento_mais_recente }}",
            "cpf_cnpj_emitente": "={{ $json.cpf_cnpj_emitente }}",
            "razao_social_emitente": "={{ $json.razao_social_emitente }}",
            "inscricao_estadual_emitente": "={{ $json.inscricao_estadual_emitente }}",
            "uf_emitente": "={{ $json.uf_emitente }}",
            "municipio_emitente": "={{ $json.municipio_emitente }}",
            "nome_destinatario": "={{ $json.nome_destinatario }}",
            "cnpj_destinatario": "={{ $json.cnpj_destinatario }}",
            "uf_destinatario": "={{ $json.uf_destinatario }}",
            "indicador_ie_destinatario": "={{ $json.indicador_ie_destinatario }}",
            "destino_operacao": "={{ $json.destino_operacao }}",
            "consumidor_final": "={{ $json.consumidor_final }}",
            "presenca_comprador": "={{ $json.presenca_comprador }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "chave_acesso",
              "displayName": "chave_acesso",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "modelo",
              "displayName": "modelo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "serie",
              "displayName": "serie",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "natureza_operacao",
              "displayName": "natureza_operacao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "data_emissao",
              "displayName": "data_emissao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "evento_mais_recente",
              "displayName": "evento_mais_recente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "data_hora_evento_mais_recente",
              "displayName": "data_hora_evento_mais_recente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "cpf_cnpj_emitente",
              "displayName": "cpf_cnpj_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "razao_social_emitente",
              "displayName": "razao_social_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "inscricao_estadual_emitente",
              "displayName": "inscricao_estadual_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "uf_emitente",
              "displayName": "uf_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "municipio_emitente",
              "displayName": "municipio_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cnpj_destinatario",
              "displayName": "cnpj_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "nome_destinatario",
              "displayName": "nome_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "uf_destinatario",
              "displayName": "uf_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "indicador_ie_destinatario",
              "displayName": "indicador_ie_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "destino_operacao",
              "displayName": "destino_operacao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "consumidor_final",
              "displayName": "consumidor_final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "presenca_comprador",
              "displayName": "presenca_comprador",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "valor_nota_fiscal",
              "displayName": "valor_nota_fiscal",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1140,
        80
      ],
      "id": "efbb07f4-17b2-409d-accd-272044a09931",
      "name": "INSERIR NOTA FISCAL",
      "credentials": {
        "postgres": {
          "id": "vI97A52vu2wzn33W",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "itens_notas_fiscais",
          "mode": "list",
          "cachedResultName": "itens_notas_fiscais"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "chave_acesso": "={{ $json.chave_acesso }}",
            "modelo": "={{ $json.modelo }}",
            "serie": "={{ $json.serie }}",
            "numero": "={{ $json.numero }}",
            "natureza_operacao": "={{ $json.natureza_operacao }}",
            "data_emissao": "={{ $json.data_emissao }}",
            "cpf_cnpj_emitente": "={{ $json.cpf_cnpj_emitente }}",
            "razao_social_emitente": "={{ $json.razao_social_emitente }}",
            "inscricao_estadual_emitente": "={{ $json.inscricao_estadual_emitente }}",
            "uf_emitente": "={{ $json.uf_emitente }}",
            "municipio_emitente": "={{ $json.municipio_emitente }}",
            "cnpj_destinatario": "={{ $json.cnpj_destinatario }}",
            "nome_destinatario": "={{ $json.nome_destinatario }}",
            "indicador_ie_destinatario": "={{ $json.indicador_ie_destinatario }}",
            "uf_destinatario": "={{ $json.uf_destinatario }}",
            "destino_operacao": "={{ $json.destino_operacao }}",
            "consumidor_final": "={{ $json.consumidor_final }}",
            "presenca_comprador": "={{ $json.presenca_comprador }}",
            "numero_produto": "={{ $json.numero_produto }}",
            "descricao_produto_servico": "={{ $json.descricao_produto_servico }}",
            "codigo_ncm_sh": "={{ $json.codigo_ncm_sh }}",
            "ncm_sh_tipo_produto": "={{ $json.ncm_sh_tipo_produto }}",
            "cfop": "={{ $json.cfop }}",
            "quantidade": "={{ $json.quantidade }}",
            "unidade": "={{ $json.unidade }}",
            "valor_unitario": "={{ $json.valor_unitario }}",
            "valor_total": "={{ $json.valor_total }}"
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "chave_acesso",
              "displayName": "chave_acesso",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "modelo",
              "displayName": "modelo",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "serie",
              "displayName": "serie",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "numero",
              "displayName": "numero",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "natureza_operacao",
              "displayName": "natureza_operacao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "data_emissao",
              "displayName": "data_emissao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "cpf_cnpj_emitente",
              "displayName": "cpf_cnpj_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "razao_social_emitente",
              "displayName": "razao_social_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "inscricao_estadual_emitente",
              "displayName": "inscricao_estadual_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "uf_emitente",
              "displayName": "uf_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "municipio_emitente",
              "displayName": "municipio_emitente",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cnpj_destinatario",
              "displayName": "cnpj_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "nome_destinatario",
              "displayName": "nome_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "uf_destinatario",
              "displayName": "uf_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "indicador_ie_destinatario",
              "displayName": "indicador_ie_destinatario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "destino_operacao",
              "displayName": "destino_operacao",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "consumidor_final",
              "displayName": "consumidor_final",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "presenca_comprador",
              "displayName": "presenca_comprador",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "numero_produto",
              "displayName": "numero_produto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "descricao_produto_servico",
              "displayName": "descricao_produto_servico",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "codigo_ncm_sh",
              "displayName": "codigo_ncm_sh",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "ncm_sh_tipo_produto",
              "displayName": "ncm_sh_tipo_produto",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "cfop",
              "displayName": "cfop",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "quantidade",
              "displayName": "quantidade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "unidade",
              "displayName": "unidade",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "valor_unitario",
              "displayName": "valor_unitario",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "valor_total",
              "displayName": "valor_total",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {
          "skipOnConflict": true
        }
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        1140,
        300
      ],
      "id": "7308c637-7b2a-4705-936a-55a8f5aeec20",
      "name": "INSERIR ITENS",
      "credentials": {
        "postgres": {
          "id": "vI97A52vu2wzn33W",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DROP TABLE itens_notas_fiscais, notas_fiscais\n\n  \n",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        380,
        660
      ],
      "id": "d5d0555c-7139-4cac-b544-0176a2707d95",
      "name": "Deletar Tabelas",
      "credentials": {
        "postgres": {
          "id": "vI97A52vu2wzn33W",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\n\nfunction normalize(value) {\n  return value === undefined || value === null ? '' : String(value).trim();\n}\n\nfunction normalizeNumber(value) {\n  if (value === null || value === undefined || value === '') return 0;\n  if (typeof value === 'string') {\n    value = value.replace('R$', '').replace(/\\./g, '').replace(',', '.').trim();\n  }\n  const num = parseFloat(value);\n  return isNaN(num) ? 0 : num;\n}\n\nreturn {\n  json: {\n    chave_acesso: normalize(data['CHAVE DE ACESSO']),\n    modelo: normalize(data.MODELO),\n    serie: normalize(data['SÉRIE']),\n    numero: normalize(data['NÚMERO']),\n    natureza_operacao: normalize(data['NATUREZA DA OPERAÇÃO']),\n    data_emissao: normalize(data['DATA EMISSÃO']),\n    cpf_cnpj_emitente: normalize(data['CPF/CNPJ Emitente']),\n    razao_social_emitente: normalize(data['RAZÃO SOCIAL EMITENTE']),\n    inscricao_estadual_emitente: normalize(data['INSCRIÇÃO ESTADUAL EMITENTE']),\n    uf_emitente: normalize(data['UF EMITENTE']),\n    municipio_emitente: normalize(data['MUNICÍPIO EMITENTE']),\n    cnpj_destinatario: normalize(data['CNPJ DESTINATÁRIO']),\n    nome_destinatario: normalize(data['NOME DESTINATÁRIO']),\n    uf_destinatario: normalize(data['UF DESTINATÁRIO']),\n    indicador_ie_destinatario: normalize(data['INDICADOR IE DESTINATÁRIO']),\n    destino_operacao: normalize(data['DESTINO DA OPERAÇÃO']),\n    consumidor_final: normalize(data['CONSUMIDOR FINAL']),\n    presenca_comprador: normalize(data['PRESENÇA DO COMPRADOR']),\n    numero_produto: normalize(data['NÚMERO PRODUTO']),\n    descricao_produto_servico: normalize(data['DESCRIÇÃO PRODUTO/SERVIÇO']),\n    codigo_ncm_sh: normalize(data['CÓDIGO NCM/SH']),\n    ncm_sh_tipo_produto: normalize(data['NCM/SH TIPO PRODUTO']),\n    cfop: normalize(data.CFOP),\n    quantidade: normalizeNumber(data.QUANTIDADE),\n    unidade: normalize(data.UNIDADE),\n    valor_unitario: normalizeNumber(data['VALOR UNITÁRIO']),\n    valor_total: normalizeNumber(data['VALOR TOTAL'])\n  }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        300
      ],
      "id": "ddd69853-215a-4ef4-aa22-6cd45fc07c57",
      "name": "VALIDAR DADOS - ITENS"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const data = $json;\n\nfunction normalize(value) {\n  return value === undefined || value === null ? '' : String(value).trim();\n}\n\nfunction normalizeNumber(value) {\n  if (value === null || value === undefined || value === '') return 0;\n  if (typeof value === 'string') {\n    value = value.replace('R$', '').replace(/\\./g, '').replace(',', '.').trim();\n  }\n  const num = parseFloat(value);\n  return isNaN(num) ? 0 : num;\n}\n\nfunction normalizeDate(value) {\n  if (!value) return null;\n  const date = new Date(value);\n  return isNaN(date.getTime()) ? null : date.toISOString().split('T')[0]; // retorna só a data\n}\n\nfunction normalizeTimestamp(value) {\n  if (!value) return null;\n  const date = new Date(value);\n  return isNaN(date.getTime()) ? null : date.toISOString(); // retorna data completa com hora\n}\n\nreturn {\n  json: {\n    chave_acesso: normalize(data['CHAVE DE ACESSO']),\n    modelo: normalize(data.MODELO),\n    serie: normalize(data['SÉRIE']),\n    numero: normalize(data['NÚMERO']),\n    natureza_operacao: normalize(data['NATUREZA DA OPERAÇÃO']),\n    data_emissao: normalizeDate(data['DATA EMISSÃO']),\n    evento_mais_recente: normalize(data['EVENTO MAIS RECENTE']),\n    data_hora_evento_mais_recente: normalizeTimestamp(data['DATA/HORA EVENTO MAIS RECENTE']),\n    cpf_cnpj_emitente: normalize(data['CPF/CNPJ Emitente']),\n    razao_social_emitente: normalize(data['RAZÃO SOCIAL EMITENTE']),\n    inscricao_estadual_emitente: normalize(data['INSCRIÇÃO ESTADUAL EMITENTE']),\n    uf_emitente: normalize(data['UF EMITENTE']),\n    municipio_emitente: normalize(data['MUNICÍPIO EMITENTE']),\n    cnpj_destinatario: normalize(data['CNPJ DESTINATÁRIO']),\n    nome_destinatario: normalize(data['NOME DESTINATÁRIO']),\n    uf_destinatario: normalize(data['UF DESTINATÁRIO']),\n    indicador_ie_destinatario: normalize(data['INDICADOR IE DESTINATÁRIO']),\n    destino_operacao: normalize(data['DESTINO DA OPERAÇÃO']),\n    consumidor_final: normalize(data['CONSUMIDOR FINAL']),\n    presenca_comprador: normalize(data['PRESENÇA DO COMPRADOR']),\n    valor_nota_fiscal: normalizeNumber(data['VALOR NOTA FISCAL'])\n  }\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        940,
        80
      ],
      "id": "993de73b-82e2-465d-8ed9-4ef18b9c8e10",
      "name": "VALIDAR DADOS - NOTAS FISCAIS"
    },
    {
      "parameters": {
        "binaryPropertyName": "=file_1",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        740,
        300
      ],
      "id": "5ecfea8a-44c2-43c2-98ea-89c31228bfdf",
      "name": "EXTRAIR ITENS"
    },
    {
      "parameters": {
        "binaryPropertyName": "file_0",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        740,
        80
      ],
      "id": "2a96ca18-7058-4f9c-97a7-006341508395",
      "name": "EXTRAIR NOTAS FISCAIS"
    },
    {
      "parameters": {
        "content": "### Manipulação do Banco de Dados para testes",
        "height": 240,
        "width": 460,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        140,
        600
      ],
      "id": "15d0ce9c-2e80-4402-adb6-34f53860d953",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "### Validação dos Dados\nO banco não vai aceitar Notas Fiscais com o mesmo valor e não vai aceitar itens idênticos com a mesma nota (por isso os valores nulos tiveram que ser tratados para serem lidos como vazio ou 0 (dependendo de cada tipo de dado)). \n\nOs nodes de **Extract from CSV** estão extraindo os dados e retornando o arquivo **json** para nodes de **Code.**\n\nNos nodes de **Code** estão sendo feitas as validações dos dados, que serão enviados depois para os nodes do **Postgres.**\n\nNos nodes do **Postgres** está sendo feito o **INSERT** com o opção **\"Skip on Conflict\"** habilitada (se houver algum registro idêntico, será ignorado).\n\nSendo assim o Banco de Dados não vai enviar em momento algum mensagem de erro ao tentar inserir algum valor repetido.",
        "height": 580,
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -260,
        0
      ],
      "id": "3a9f482d-5941-49fd-a8b9-77a3d96cf61b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "options": {
          "allowFileUploads": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        180,
        220
      ],
      "id": "17e38f60-91af-49ff-9d5e-38eaef610275",
      "name": "CHAT",
      "webhookId": "54383f29-5072-4fa5-a69a-ec97461b4cf3"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('CHAT').item.json.chatInput }}",
        "options": {
          "systemMessage": "Você é um Assistente de Análise Fiscal, um agente de IA especializado em traduzir perguntas em linguagem natural para consultas em um banco de dados de notas fiscais. Sua função é ser a ponte entre o usuário e os dados brutos.\n\nSeu Processo Obrigatório:\n\nSua operação se resume a um ciclo de 4 passos que você deve seguir para cada pergunta do usuário:\n\nAnalisar e Planejar:\n\nPrimeiro, leia atentamente a pergunta do usuário para entender a intenção.\n\nEm seguida, planeje qual é a query SQL exata necessária para encontrar a resposta. Pense: \"Quais tabelas preciso consultar (notas_fiscais, itens_notas_fiscais)? Como devo conectá-las (JOIN)? Quais filtros (WHERE), agregações (SUM, COUNT) e ordenações (ORDER BY) são necessários?\"\n\nFormular e Executar a Ferramenta:\n\nConstrua a query SQL que você planejou no passo anterior.\n\nSua única ação permitida é chamar a ferramenta database e passar essa query SQL como parâmetro.\n\nInterpretar o Resultado da Ferramenta:\n\nA ferramenta database irá retornar os dados brutos em formato JSON. Seu trabalho é analisar este JSON para extrair os valores e informações essenciais.\n\nResponder ao Usuário:\n\nTraduza os dados brutos do JSON em uma resposta final, clara e útil, em português.\n\nNunca mostre a query SQL ou o JSON bruto para o usuário, a menos que ele peça explicitamente. Formate a resposta de forma amigável.\n\nContexto do Banco de Dados (Suas Ferramentas de Trabalho):\n\nTabela notas_fiscais: Contém o cabeçalho das notas (emitente, destinatário, valor total, data).\n\nTabela itens_notas_fiscais: Contém os detalhes de cada produto/serviço da nota.\n\nChave de Ligação: Use a coluna chave_acesso para fazer o JOIN entre as duas tabelas.\n\nEsses são os schemas das tabelas\n\nCREATE TABLE IF NOT EXISTS notas_fiscais (\n    chave_acesso TEXT PRIMARY KEY,\n    modelo TEXT NOT NULL,\n    serie TEXT NOT NULL,\n    numero TEXT NOT NULL,\n    natureza_operacao TEXT NOT NULL,\n    data_emissao DATE NOT NULL,\n    evento_mais_recente TEXT NOT NULL,\n    data_hora_evento_mais_recente TIMESTAMP NOT NULL,\n    cpf_cnpj_emitente TEXT NOT NULL,\n    razao_social_emitente TEXT NOT NULL,\n    inscricao_estadual_emitente TEXT NOT NULL,\n    uf_emitente TEXT NOT NULL,\n    municipio_emitente TEXT NOT NULL,\n    cnpj_destinatario TEXT NOT NULL,\n    nome_destinatario TEXT NOT NULL,\n    uf_destinatario TEXT NOT NULL,\n    indicador_ie_destinatario TEXT NOT NULL,\n    destino_operacao TEXT NOT NULL,\n    consumidor_final TEXT NOT NULL,\n    presenca_comprador TEXT NOT NULL,\n    valor_nota_fiscal NUMERIC(15, 2) NOT NULL\n);\n\n-- Tabela para Itens das Notas Fiscais\nCREATE TABLE IF NOT EXISTS itens_notas_fiscais (\n    id SERIAL PRIMARY KEY,\n\n    chave_acesso TEXT NOT NULL REFERENCES notas_fiscais(chave_acesso),\n    modelo TEXT NOT NULL,\n    serie TEXT NOT NULL,\n    numero TEXT NOT NULL,\n    natureza_operacao TEXT NOT NULL,\n    data_emissao DATE NOT NULL,\n    cpf_cnpj_emitente TEXT NOT NULL,\n    razao_social_emitente TEXT NOT NULL,\n    inscricao_estadual_emitente TEXT NOT NULL,\n    uf_emitente TEXT NOT NULL,\n    municipio_emitente TEXT NOT NULL,\n    cnpj_destinatario TEXT NOT NULL,\n    nome_destinatario TEXT NOT NULL,\n    uf_destinatario TEXT NOT NULL,\n    indicador_ie_destinatario TEXT NOT NULL,\n    destino_operacao TEXT NOT NULL,\n    consumidor_final TEXT NOT NULL,\n    presenca_comprador TEXT NOT NULL,\n    numero_produto TEXT NOT NULL,\n    descricao_produto_servico TEXT NOT NULL,\n    codigo_ncm_sh TEXT NOT NULL,\n    ncm_sh_tipo_produto TEXT NOT NULL,\n    cfop TEXT NOT NULL,\n    quantidade NUMERIC(15, 4) NOT NULL,\n    unidade TEXT NOT NULL,\n    valor_unitario NUMERIC(15, 4) NOT NULL,\n    valor_total NUMERIC(15, 2) NOT NULL,\n\nExemplos Práticos do Seu Processo:\n\nPergunta do Usuário: \"Qual o total vendido para a 'Empresa X' no último mês?\"\n\nSeu Raciocínio (Passo 1): \"Preciso somar valor_nota_fiscal da tabela notas_fiscais. Vou filtrar por nome_destinatario = 'Empresa X' e data_emissao no último mês.\"\n\nSua Ação (Passo 2): Chamar database com a query: SELECT SUM(valor_nota_fiscal) FROM notas_fiscais WHERE nome_destinatario = 'Empresa X' AND data_emissao >= CURRENT_DATE - INTERVAL '1 month';\n\nSua Análise (Passo 3): A ferramenta retorna [{\"sum\": 15480.50}].\n\nSua Resposta (Passo 4): \"O total vendido para a Empresa X no último mês foi de R$ 15.480,50.\"\n\nPergunta do Usuário: \"Liste os 3 produtos mais caros na nota fiscal número 987.\"\n\nSeu Raciocínio (Passo 1): \"Preciso da descricao_produto_servico e valor_total da tabela itens_notas_fiscais. Vou filtrar pelo numero da nota na tabela notas_fiscais, então preciso de um JOIN. Vou ordenar por valor_total de forma decrescente e pegar os 3 primeiros (LIMIT 3).\"\n\nSua Ação (Passo 2): Chamar database com a query: SELECT i.descricao_produto_servico, i.valor_total FROM itens_notas_fiscais i JOIN notas_fiscais n ON i.chave_acesso = n.chave_acesso WHERE n.numero = '987' ORDER BY i.valor_total DESC LIMIT 3;\n\nSua Análise (Passo 3): A ferramenta retorna [{\"descricao_produto_servico\": \"Produto A\", \"valor_total\": 500.00}, {\"descricao_produto_servico\": \"Produto B\", \"valor_total\": 350.00}, ...].\n\nSua Resposta (Passo 4): \"Os 3 produtos mais caros na nota fiscal 987 foram: 1. Produto A (R$ 500,00), 2. Produto B (R$ 350,00), ...\"\n\nRegra de Ouro: Seu objetivo é abstrair a complexidade. O usuário faz uma pergunta simples; você faz todo o trabalho técnico e devolve uma resposta simples, não invente números, responda corretamente.\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        1520,
        220
      ],
      "id": "02aecfc9-1344-4aee-9744-08c17a9f3a7c",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "binaryPropertyName": "=data0"
      },
      "type": "n8n-nodes-base.compression",
      "typeVersion": 1.1,
      "position": [
        540,
        120
      ],
      "id": "75e23b98-77b5-43f9-8b91-4e97a4a82977",
      "name": "Compression"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        1340,
        300
      ],
      "id": "6f26cea4-6187-421d-93d9-61ccf20297b0",
      "name": "Merge"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "231750ab-2c26-43d7-8c0d-5c7ffefa01e1",
              "leftValue": "={{ $json.files[0] }}",
              "rightValue": "",
              "operator": {
                "type": "object",
                "operation": "notEmpty",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        360,
        220
      ],
      "id": "28b3b5d3-f496-4bab-97ff-d596fd9894c3",
      "name": "If"
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Execute a SQL query in Postgres",
        "operation": "executeQuery",
        "query": "{{ $fromAI('query') }}",
        "options": {}
      },
      "type": "n8n-nodes-base.postgresTool",
      "typeVersion": 2.6,
      "position": [
        1740,
        420
      ],
      "id": "d43c2fec-c667-45c3-8cce-837a914442cf",
      "name": "database",
      "credentials": {
        "postgres": {
          "id": "vI97A52vu2wzn33W",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "model": "llama-3.3-70b-versatile",
        "options": {
          "temperature": 0.1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        1500,
        420
      ],
      "id": "d99ff60b-889c-4645-9fc7-4aee35c37f2e",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "LHtxF7nvbI7oql5F",
          "name": "Groq account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "VALIDAR DADOS - ITENS": {
      "main": [
        [
          {
            "node": "INSERIR ITENS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "VALIDAR DADOS - NOTAS FISCAIS": {
      "main": [
        [
          {
            "node": "INSERIR NOTA FISCAL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRAIR ITENS": {
      "main": [
        [
          {
            "node": "VALIDAR DADOS - ITENS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "EXTRAIR NOTAS FISCAIS": {
      "main": [
        [
          {
            "node": "VALIDAR DADOS - NOTAS FISCAIS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "CHAT": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compression": {
      "main": [
        [
          {
            "node": "EXTRAIR NOTAS FISCAIS",
            "type": "main",
            "index": 0
          },
          {
            "node": "EXTRAIR ITENS",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INSERIR NOTA FISCAL": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "INSERIR ITENS": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Compression",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "database": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ae384180-eb7b-4465-a0e9-4fcc38bfad6b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "558d88703fb65b2d0e44613bc35916258b0f0bf983c5d4730c00c424b77ca36a"
  },
  "id": "W1WEG8wvYfcCkMND",
  "tags": []
}